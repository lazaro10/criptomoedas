//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.string` struct is generated, and contains static references to 6 localization tables.
  struct string {
    /// This `R.string.accessibilityLabels` struct is generated, and contains static references to 4 localization keys.
    struct accessibilityLabels {
      /// Value: Exchange Cell
      static let exchangeCell = Rswift.StringResource(key: "exchangeCell", tableName: "AccessibilityLabels", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Exchange Detail
      static let exchangeDetail = Rswift.StringResource(key: "exchangeDetail", tableName: "AccessibilityLabels", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Exchange List
      static let exchangeList = Rswift.StringResource(key: "exchangeList", tableName: "AccessibilityLabels", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Navigation View
      static let navigationApplicaton = Rswift.StringResource(key: "navigationApplicaton", tableName: "AccessibilityLabels", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Exchange Cell
      static func exchangeCell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exchangeCell", tableName: "AccessibilityLabels", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AccessibilityLabels", preferredLanguages: preferredLanguages) else {
          return "exchangeCell"
        }

        return NSLocalizedString("exchangeCell", tableName: "AccessibilityLabels", bundle: bundle, comment: "")
      }

      /// Value: Exchange Detail
      static func exchangeDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exchangeDetail", tableName: "AccessibilityLabels", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AccessibilityLabels", preferredLanguages: preferredLanguages) else {
          return "exchangeDetail"
        }

        return NSLocalizedString("exchangeDetail", tableName: "AccessibilityLabels", bundle: bundle, comment: "")
      }

      /// Value: Exchange List
      static func exchangeList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exchangeList", tableName: "AccessibilityLabels", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AccessibilityLabels", preferredLanguages: preferredLanguages) else {
          return "exchangeList"
        }

        return NSLocalizedString("exchangeList", tableName: "AccessibilityLabels", bundle: bundle, comment: "")
      }

      /// Value: Navigation View
      static func navigationApplicaton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("navigationApplicaton", tableName: "AccessibilityLabels", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AccessibilityLabels", preferredLanguages: preferredLanguages) else {
          return "navigationApplicaton"
        }

        return NSLocalizedString("navigationApplicaton", tableName: "AccessibilityLabels", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.apI` struct is generated, and contains static references to 2 localization keys.
    struct apI {
      /// Value: https://rest.coinapi.io/v1/exchanges
      static let exchanges = Rswift.StringResource(key: "exchanges", tableName: "API", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: https://rest.coinapi.io/v1/exchanges/icons/500
      static let exchangesIcons = Rswift.StringResource(key: "exchangesIcons", tableName: "API", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: https://rest.coinapi.io/v1/exchanges
      static func exchanges(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exchanges", tableName: "API", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "API", preferredLanguages: preferredLanguages) else {
          return "exchanges"
        }

        return NSLocalizedString("exchanges", tableName: "API", bundle: bundle, comment: "")
      }

      /// Value: https://rest.coinapi.io/v1/exchanges/icons/500
      static func exchangesIcons(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exchangesIcons", tableName: "API", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "API", preferredLanguages: preferredLanguages) else {
          return "exchangesIcons"
        }

        return NSLocalizedString("exchangesIcons", tableName: "API", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.exchangesExtra` struct is generated, and contains static references to 10 localization keys.
    struct exchangesExtra {
      /// en translation: First negotiation
      ///
      /// Locales: en, pt-BR
      static let firstNegotiation = Rswift.StringResource(key: "firstNegotiation", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: First purchase order
      ///
      /// Locales: en, pt-BR
      static let firstPurchaseOrder = Rswift.StringResource(key: "firstPurchaseOrder", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: First quotation
      ///
      /// Locales: en, pt-BR
      static let firstQuotation = Rswift.StringResource(key: "firstQuotation", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Last negotiation
      ///
      /// Locales: en, pt-BR
      static let lastNegotiation = Rswift.StringResource(key: "lastNegotiation", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Last purchase order
      ///
      /// Locales: en, pt-BR
      static let lastPurchaseOrder = Rswift.StringResource(key: "lastPurchaseOrder", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Last quotation
      ///
      /// Locales: en, pt-BR
      static let lastQuotation = Rswift.StringResource(key: "lastQuotation", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Sum of an Hour
      ///
      /// Locales: en, pt-BR
      static let sumAnHour = Rswift.StringResource(key: "sumAnHour", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Sum of an day
      ///
      /// Locales: en, pt-BR
      static let sumAnday = Rswift.StringResource(key: "SumAnday", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Summation one month
      ///
      /// Locales: en, pt-BR
      static let sumMonth = Rswift.StringResource(key: "SumMonth", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Total symbols
      ///
      /// Locales: en, pt-BR
      static let totalSymbols = Rswift.StringResource(key: "totalSymbols", tableName: "ExchangesExtra", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)

      /// en translation: First negotiation
      ///
      /// Locales: en, pt-BR
      static func firstNegotiation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstNegotiation", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "firstNegotiation"
        }

        return NSLocalizedString("firstNegotiation", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: First purchase order
      ///
      /// Locales: en, pt-BR
      static func firstPurchaseOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstPurchaseOrder", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "firstPurchaseOrder"
        }

        return NSLocalizedString("firstPurchaseOrder", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: First quotation
      ///
      /// Locales: en, pt-BR
      static func firstQuotation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstQuotation", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "firstQuotation"
        }

        return NSLocalizedString("firstQuotation", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Last negotiation
      ///
      /// Locales: en, pt-BR
      static func lastNegotiation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastNegotiation", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "lastNegotiation"
        }

        return NSLocalizedString("lastNegotiation", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Last purchase order
      ///
      /// Locales: en, pt-BR
      static func lastPurchaseOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastPurchaseOrder", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "lastPurchaseOrder"
        }

        return NSLocalizedString("lastPurchaseOrder", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Last quotation
      ///
      /// Locales: en, pt-BR
      static func lastQuotation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastQuotation", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "lastQuotation"
        }

        return NSLocalizedString("lastQuotation", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Sum of an Hour
      ///
      /// Locales: en, pt-BR
      static func sumAnHour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sumAnHour", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "sumAnHour"
        }

        return NSLocalizedString("sumAnHour", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Sum of an day
      ///
      /// Locales: en, pt-BR
      static func sumAnday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SumAnday", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "SumAnday"
        }

        return NSLocalizedString("SumAnday", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Summation one month
      ///
      /// Locales: en, pt-BR
      static func sumMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SumMonth", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "SumMonth"
        }

        return NSLocalizedString("SumMonth", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      /// en translation: Total symbols
      ///
      /// Locales: en, pt-BR
      static func totalSymbols(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("totalSymbols", tableName: "ExchangesExtra", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ExchangesExtra", preferredLanguages: preferredLanguages) else {
          return "totalSymbols"
        }

        return NSLocalizedString("totalSymbols", tableName: "ExchangesExtra", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.navigationBar` struct is generated, and contains static references to 1 localization keys.
    struct navigationBar {
      /// en translation: Exchanges
      ///
      /// Locales: en, pt-BR
      static let exchangeList = Rswift.StringResource(key: "exchangeList", tableName: "NavigationBar", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)

      /// en translation: Exchanges
      ///
      /// Locales: en, pt-BR
      static func exchangeList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exchangeList", tableName: "NavigationBar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NavigationBar", preferredLanguages: preferredLanguages) else {
          return "exchangeList"
        }

        return NSLocalizedString("exchangeList", tableName: "NavigationBar", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.networkError` struct is generated, and contains static references to 3 localization keys.
    struct networkError {
      /// en translation: An unexpected error has occurred.
      ///
      /// Locales: en, pt-BR
      static let other = Rswift.StringResource(key: "other", tableName: "NetworkError", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: An unexpected error occurred while communicating with the server.
      ///
      /// Locales: en, pt-BR
      static let mapping = Rswift.StringResource(key: "mapping", tableName: "NetworkError", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: You are currently offline.
      ///
      /// Locales: en, pt-BR
      static let offline = Rswift.StringResource(key: "offline", tableName: "NetworkError", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)

      /// en translation: An unexpected error has occurred.
      ///
      /// Locales: en, pt-BR
      static func other(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("other", tableName: "NetworkError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NetworkError", preferredLanguages: preferredLanguages) else {
          return "other"
        }

        return NSLocalizedString("other", tableName: "NetworkError", bundle: bundle, comment: "")
      }

      /// en translation: An unexpected error occurred while communicating with the server.
      ///
      /// Locales: en, pt-BR
      static func mapping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mapping", tableName: "NetworkError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NetworkError", preferredLanguages: preferredLanguages) else {
          return "mapping"
        }

        return NSLocalizedString("mapping", tableName: "NetworkError", bundle: bundle, comment: "")
      }

      /// en translation: You are currently offline.
      ///
      /// Locales: en, pt-BR
      static func offline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("offline", tableName: "NetworkError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "NetworkError", preferredLanguages: preferredLanguages) else {
          return "offline"
        }

        return NSLocalizedString("offline", tableName: "NetworkError", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
